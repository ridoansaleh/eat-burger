import React, { useState, useContext, useEffect } from "react";
import { useHistory } from "react-router-dom";
import { TextField, Button } from "@material-ui/core";
import {
  CheckCircleOutline as CheckCircleOutlineIcon,
  Cancel as CancelIcon,
} from "@material-ui/icons";
import { Snackbar } from "@material-ui/core";
import { Alert } from "@material-ui/lab";
import useStyles from "./_authActionStyle";
import { FirebaseContext } from "../../context";
import { LOGIN_PATH } from "../../constant/path";

function AuthAction() {
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [isFormSubmitted, setFormSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [pageMode, setPageMode] = useState("");

  const [isPasswordResetSucceedOpen, setPasswordResetSucceedOpen] =
    useState(false);
  const [isPasswordResetFailedOpen, setPasswordResetFailedOpen] =
    useState(false);

  const [isEmailVerificationDone, setEmailVerificationDone] = useState(false);
  const [isEmailVerificationSucceed, setEmailVerificationSucceed] =
    useState(false);

  const classes = useStyles();
  const history = useHistory();
  const { auth } = useContext(FirebaseContext);

  const redirectToLogin = () => {
    history.push(LOGIN_PATH);
  };

  const getParams = () => {
    const hash = window.location.hash;
    const queryString = hash.split("?")[1];
    const urlParams = new URLSearchParams(queryString);
    return {
      mode: urlParams.get("mode"),
      oobCode: urlParams.get("oobCode"),
    }
  }

  useEffect(() => {
    const { mode, oobCode } = getParams();
    if (!mode) {
      redirectToLogin();
      return;
    };
    setPageMode(mode);
    if (mode === "verifyEmail") {
      verifyTheVerificationEmailCode(oobCode);
    }
  }, []);

  // Verify the reset code
  const verifyTheResetPasswordCode = (oobCode) => {
    auth
      .verifyPasswordResetCode(oobCode)
      .then(async () => {
        await auth.confirmPasswordReset(oobCode, newPassword);
      })
      .then(() => {
        setPasswordResetSucceedOpen(true);
        setNewPassword("");
        setConfirmPassword("");
        setTimeout(() => {
          redirectToLogin();
        }, 6500);
      })
      .catch((error) => {
        console.error("Error resetting password:", error);
        setPasswordResetFailedOpen(true);
      })
      .finally(() => {
        setLoading(false);
        setFormSubmitted(false);
      });
  };

  // Apply the action code to verify the email
  const verifyTheVerificationEmailCode = (oobCode) => {
    auth
      .applyActionCode(oobCode)
      .then((response) => {
        setEmailVerificationSucceed(true);
      })
      .catch((error) => {})
      .finally(() => {
        setEmailVerificationDone(true);
      });
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    if (loading) return;

    /* 
      The oobCode stands for "out-of-band code" in Firebase.
      It is a one-time-use code included in action links generated by Firebase Authentication for specific purposes, such as:
      1. Email Verification: Verifying a user's email address.
      2. Password Reset: Allowing users to reset their passwords.
      3. Email Change Confirmation: Confirming changes to a user's email address.
      4. Other Authentication Actions: Such as account recovery or revoking email actions.
    */
    const { oobCode } = getParams();

    setLoading(true);
    setFormSubmitted(true);

    if (!newPassword || !confirmPassword || newPassword !== confirmPassword)
      return;

    if (!oobCode) {
      alert("Invalid or missing reset code.");
      return;
    }

    if (pageMode === "resetPassword") {
      verifyTheResetPasswordCode(oobCode);
    }
  };

  console.log("pageMode : ", pageMode);

  return (
    <div className={classes.container}>
      <div className={classes.formWrapper}>
        {pageMode === "verifyEmail" &&
        isEmailVerificationDone &&
        isEmailVerificationSucceed ? (
          <div className={classes.verifyEmailBox}>
            <CheckCircleOutlineIcon className={classes.succeedIcon} />
            <h3 className={classes.verifyLabel}>Email Verified</h3>
            <p>Your email address was successfully verified.</p>
            <Button
              variant="contained"
              color="primary"
              onClick={redirectToLogin}
            >
              Login Now
            </Button>
          </div>
        ) : null}
        {pageMode === "verifyEmail" &&
        isEmailVerificationDone &&
        !isEmailVerificationSucceed ? (
          <div className={classes.verifyEmailBox}>
            <CancelIcon className={classes.failedIcon} />
            <h3 className={classes.verifyLabel}>Verification Failed</h3>
            <p className={classes.verifyDescription}>
              We've failed to verify your email address.
              <br /> Please try again later!
            </p>
          </div>
        ) : null}
        {pageMode === "resetPassword" ? (
          <form
            noValidate
            autoComplete="off"
            className={classes.boxForm}
            onSubmit={handleFormSubmit}
          >
            <h2 className={classes.pageTitle}>Reset Your Password</h2>
            <p className={classes.pageDescription}>
              Please create your new password and confirm!
            </p>
            <TextField
              label="New Password"
              type="password"
              variant="outlined"
              size="small"
              className={classes.input}
              error={isFormSubmitted && !newPassword}
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
            />
            <TextField
              label="Confirm Password"
              type="password"
              variant="outlined"
              size="small"
              className={classes.input}
              error={
                isFormSubmitted &&
                (!confirmPassword || newPassword !== confirmPassword)
              }
              helperText={
                confirmPassword && newPassword !== confirmPassword
                  ? "Password is not matched"
                  : ""
              }
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
            />
            <Button
              type="submit"
              variant="contained"
              color="primary"
              className={classes.resetPasswordBtn}
            >
              Reset Password
            </Button>
          </form>
        ) : null}
      </div>
      <Snackbar
        open={isPasswordResetSucceedOpen}
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
        autoHideDuration={6000}
        onClose={() => setPasswordResetSucceedOpen(false)}
      >
        <Alert
          onClose={() => setPasswordResetSucceedOpen(false)}
          severity="success"
        >
          Password has been reset successfully! Please log in with your new
          password.
        </Alert>
      </Snackbar>
      <Snackbar
        open={isPasswordResetFailedOpen}
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
        autoHideDuration={5000}
        onClose={() => setPasswordResetFailedOpen(false)}
      >
        <Alert
          onClose={() => setPasswordResetFailedOpen(false)}
          severity="error"
        >
          Failed to reset password
        </Alert>
      </Snackbar>
    </div>
  );
}

export default AuthAction;
